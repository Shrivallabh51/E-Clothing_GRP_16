package com.example.demo.services;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.demo.entities.Carts;
import com.example.demo.entities.CartsDto;
import com.example.demo.entities.Product;
import com.example.demo.entities.ProductDto;
import com.example.demo.entities.Users;
import com.example.demo.repositories.CartRepository;
import com.example.demo.repositories.ProductRepository;
import com.example.demo.repositories.UsersRepository;

@Service
public class CartService {
     @Autowired
     CartRepository crepo;
     
     @Autowired
     ProductRepository prepo;
     
     @Autowired
     UsersRepository urepo;
     
     
     public List<CartsDto> getCartsByUserId(int userId) {
    	 
         return crepo.findByUserId(userId).stream()
                 .map(this::convertToDto)
                 .collect(Collectors.toList());
     }

     private CartsDto convertToDto(Carts cart) {

         ProductDto productDto = new ProductDto();
         productDto.setP_id(cart.getProducts().getP_id());
         productDto.setProduct_Name(cart.getProducts().getProduct_Name());
         productDto.setDescription(cart.getProducts().getDescription());
         productDto.setPrice(cart.getProducts().getPrice());
         productDto.setStock_Qty(cart.getProducts().getStock_Qty());
         productDto.setImageUrl("/api/products/image/" + cart.getProducts().getP_id());
         

         CartsDto cartsDto = new CartsDto();
         cartsDto.setCartId(cart.getCart_id());
         cartsDto.setStockQty(cart.getStock_Qty());
      
         cartsDto.setProductDto(productDto);

         return cartsDto;
     }
     
     public void addItemToCart(Integer userId, Integer productId, Integer quantity) {
         // Validate input parameters (e.g., non-null, positive quantity, etc.)
         // Additional business logic (e.g., check product availability, stock, etc.)
    	   Users user = urepo.findById(userId).orElseThrow(() -> new IllegalArgumentException("User not found"));
    	    Product product = prepo.findById(productId).orElseThrow(() -> new IllegalArgumentException("Product not found"));
         // Assuming you have a Cart entity and a CartRepository
         Carts cartItem = new Carts();
         cartItem.setUsers(user);
         cartItem.setProducts(product);
         cartItem.setStock_Qty(quantity);

         crepo.save(cartItem);
     }
     
     
     public void removeItemFromCart(int userId, int productId) {
         // Validate input parameters (e.g., non-null values)

         // Find the cart item associated with the user and product
         Optional<Carts> existingCartItem = crepo.findByUserIdAndProductId(userId, productId);

         if (existingCartItem.isPresent()) {
             // Item exists, so delete it
             cartRepository.delete(existingCartItem.get());
         } else {
             // Item doesn't exist; handle this case (e.g., throw an exception or log a message)
             // ...
         }
     }
}
